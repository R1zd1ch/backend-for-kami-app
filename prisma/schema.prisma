// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  username  String  @unique
  firstName String?
  lastName  String?
  gender    String?
  partnerId String?
  bio       String?

  password  String
  avatarUrl String? // Опционально, если нужен аватар
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  tasks         Task[]
  moods         Mood[]
  moodSummary   MoodSummary[]
  books         Book[]
  notes         Note[]
  plansToWatch  PlanToWatch[]
  gifts         Gift[]
  songs         Song[]
  expenses      Expense[]
  friendships   Friendship[]       @relation("UserFriendships")
  friends       Friendship[]       @relation("UserFriends")
  refreshTokens RefreshToken[]
  resetTokens   ResetToken[]
  messages      Message[]
  chats         ChatParticipants[]
  SeenMessage   SeenMessage[]
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  status    String // Например, "pending", "accepted", "declined"
  type      String // Например, "close friend", "family", "partner"
  createdAt DateTime @default(now())

  user   User @relation("UserFriendships", fields: [userId], references: [id])
  friend User @relation("UserFriends", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@index([userId], name: "userId_idx")
  @@index([friendId], name: "friendId_idx")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  importance  String
  selectDay   String?
  subject     String
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Mood {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  moodLevel Int
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model MoodSummary {
  id           String @id @default(uuid())
  month        Int
  year         Int
  averageMonth Float

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, month, year])
}

model Book {
  id          String    @id @unique @default(uuid())
  status      String    @default("to-read")
  progress    Int       @default(0)
  startDate   DateTime?
  endDate     DateTime?
  review      String?
  rating      Int?
  isFavourite Boolean?  @default(false)

  //googleApi
  externalId    String?  @unique
  title         String
  authors       String[]
  description   String?
  coverUrl      String?
  publishedDate String?
  pages         String?
  categories    String[]
  language      String?

  isbn String?

  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([externalId])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  category  String?
  tags      String?
  isPinned  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model PlanToWatch {
  id          String   @id @default(uuid())
  type        String
  title       String
  description String?
  genre       String?
  isWatched   Boolean  @default(false)
  rating      Int? // Рейтинг (например, от 1 до 5)
  review      String? // Личный отзыв
  createdAt   DateTime @default(now())

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Gift {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    String? // Категория подарка
  price       Float? // Примерная стоимость
  priority    String?
  link        String?
  image       String?
  isCompleted Boolean?  @default(false)
  received    DateTime?
  createdAt   DateTime  @default(now())

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Song {
  id         String   @id @default(uuid())
  title      String
  artist     String
  album      String?
  genre      String?
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  category    String
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Связи
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum ChatType {
  group
  private
}

model Chat {
  id   String   @id @default(uuid())
  name String?
  type ChatType @default(private)

  participants ChatParticipants[]
  messages     Message[]
  createdAt    DateTime           @default(now())
}

model ChatParticipants {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  joinedAt DateTime @default(now())

  @@id([userId, chatId])
}

model Message {
  id        String        @id @unique @default(uuid())
  content   String
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat          @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime      @default(now())
  seenBy    SeenMessage[]

  @@index([chatId])
  @@index([senderId])
}

model SeenMessage {
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  messageId String
  seenAt    DateTime @default(now())

  @@unique([userId, messageId])
  @@index([messageId])
  @@index([userId])
  @@index([seenAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token], name: "token_idx")
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
